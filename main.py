import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from config import BOT_TOKEN
from gpt_client import ask_chatgpt
from gemini_client import ask_gemini  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–æ–∂–µ async

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π GPT –∏ Gemini.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/gpt –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ ‚Äî –¥–ª—è ChatGPT (GPT-3.5 –±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
        "/gemini –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ ‚Äî –¥–ª—è Gemini (–∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞)\n"
        "–ü—Ä–∏–º–µ—Ä:\n/gpt –†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç"
    )



async def process_prompt(message: types.Message, model_func, model_name):
    prompt = message.text.partition(' ')[2].strip()
    if not prompt:
        await message.answer(f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /{model_name.lower()}.")
        return
    await message.answer(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ {model_name}...")
    try:
        reply = await model_func(prompt)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {model_name}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ {model_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
    for i in range(0, len(reply), 4000):
        await message.answer(f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç {model_name}:\n\n{reply[i:i + 4000]}")


@dp.message(Command("gpt"))
async def gpt_cmd(message: types.Message):
    await process_prompt(message, ask_chatgpt, "GPT")


@dp.message(Command("gemini"))
async def gemini_cmd(message: types.Message):
    await process_prompt(message, ask_gemini, "Gemini")


@dp.message()
async def fallback(message: types.Message):
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /gpt –∏–ª–∏ /gemini –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n/gpt –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?\n/gemini –ü—Ä–∏–≤–µ—Ç!"
    )


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
